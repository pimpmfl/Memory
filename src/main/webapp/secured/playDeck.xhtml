<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3c.org/1999/xhtml"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui" xmlns:c="http://java.sun.com/jsp/jstl/core"
                template="/WEB-INF/templates/main.xhtml">

    <ui:define name="content" rendered="#{sessionInfoBean.loggedIn}">
        <div class="card breadcrumb__nav">
            <h:form>
                <p:breadCrumb homeDisplay="text">
                    <p:menuitem value="Home" onclick="window.location.href='./welcome.xhtml'"/>
                    <p:menuitem value="All Decks" onclick="window.location.href='./allDecks.xhtml'"/>
                    <p:menuitem value="Playing Deck" onclick="location.reload()"/>
                    <p:menuitem value="#{deckDetailController.setDeckToLearn().deckName}" onclick="location.reload()"/>
                </p:breadCrumb>
            </h:form>
        </div>

        <div class="content">
                <div class="card">
                    <h:form id="toUpdate">
                            <p:commandButton style="float:right" styleClass="ui-button-success" value="Reverse Cards" icon="pi pi-replay" action="#{deckDetailController.reverseDeck(deckDetailController.deck)}" update="toUpdate" process="@this" rendered="#{deckDetailController.deck.reversibleDeck}"/>

                        <p style="height: 50px" class="question" id="answerCard#{cardDetailController.getCardLearnView().id}">
                            #{cardDetailController.getCardLearnView().question}
                             </p>

                        <div class="card-answer">
                            <p:outputLabel id="answerCard#{cardDetailController.getCardLearnView().id}" rendered="#{cardDetailController.getCardLearnView().question != 'Good job, you finished the deck!' and cardDetailController.getCardLearnView().question != 'Good job, you already finished learning this deck!'}">
                                <p:autoUpdate/>
                                #{cardDetailController.getShowAnswer(cardDetailController.getCardLearnView()) ? cardDetailController.getCardLearnView().answer : "Hidden"}
                            </p:outputLabel>
                            <p:outputLabel rendered="#{cardDetailController.getCardLearnView().question == 'Good job, you finished the deck!' or cardDetailController.getCardLearnView().question == 'Good job, you already finished learning this deck!'}">#{cardDetailController.getCardLearnView().answer}</p:outputLabel>
                        </div>
                        <div>
                            <p:commandButton styleClass="ui-button-warning" value="Show Answer" icon="pi pi-eye" action="#{cardDetailController.setShowAnswer(cardDetailController.getCardLearnView())}" update="toUpdate" process="@this" rendered="#{cardDetailController.getShowAnswer(cardDetailController.getCardLearnView()) eq false and (cardDetailController.getCardLearnView().question != 'Good job, you finished the deck!' and cardDetailController.getCardLearnView().question != 'Good job, you already finished learning this deck!')}"/>
                            <p:commandButton styleClass="ui-button-warning" value="Hide Answer" icon="pi pi-eye-slash" action="#{cardDetailController.setShowAnswer(cardDetailController.getCardLearnView())}" update="toUpdate" process="@this" rendered="#{cardDetailController.getShowAnswer(cardDetailController.getCardLearnView()) and (cardDetailController.getCardLearnView().question != 'Good job, you finished the deck!' and cardDetailController.getCardLearnView().question != 'Good job, you already finished learning this deck!')}"/>
                            <p:linkButton outcome="allDecks" icon="pi pi-external-link" styleClass="ui-button-warning" value="Go to All Decks" rendered="#{cardDetailController.getCardLearnView().question == 'Good job, you finished the deck!' or cardDetailController.getCardLearnView().question == 'Good job, you already finished learning this deck!'}"/>
                        </div>

                        <div style="display: flex; flex-direction: column; margin-left: 5px; margin-top: 10px;">
                            <p:outputLabel rendered="#{cardDetailController.getCardLearnView().question != 'Good job, you finished the deck!' and cardDetailController.getCardLearnView().question != 'Good job, you already finished learning this deck!'}">Select rating:</p:outputLabel>
                            <p:selectOneButton styleClass="rating-options" value="#{cardDetailController.currentCardRating}" valueChangeListener="#{cardDetailController.currentCardRatingAjax}" rendered="#{cardDetailController.getCardLearnView().question != 'Good job, you finished the deck!' and cardDetailController.getCardLearnView().question != 'Good job, you already finished learning this deck!'}" hideNoSelectionOption="true">
                                <f:selectItem itemLabel="Not good" itemValue="Not good" />
                                <f:selectItem itemLabel="Good" itemValue="Good"/>
                                <f:selectItem itemLabel="Satisfied" itemValue="Satisfied"/>
                                <f:selectItem itemLabel="Super" itemValue="Super"/>
                                <f:selectItem itemLabel="Excellent" itemValue="Excellent"/>
                                <f:selectItem itemLabel="Brilliant" itemValue="Brilliant"/>
                                <p:ajax update="toUpdate" event="change" />
                            </p:selectOneButton>
                        </div>
                    </h:form>
                </div>
            </div>
    </ui:define>
</ui:composition>


